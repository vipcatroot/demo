{"version":3,"sources":["utils/bscscan.ts","hooks/useTokenBalance.ts","hooks/useLastUpdated.ts","hooks/usePreviousValue.ts","views/Profile/components/ApproveConfirmButtons.tsx","hooks/useApproveConfirmTransaction.ts","components/FoldableText/index.tsx","hooks/useAllowance.ts","hooks/ifo/v2/useGetPublicIfoData.ts","hooks/ifo/v2/useGetWalletIfoData.ts","../node_modules/lodash/every.js","../node_modules/lodash/_arrayEvery.js","../node_modules/lodash/_baseEvery.js","hooks/ifo/helpers.ts","hooks/ifo/v1/useGetPublicIfoData.ts","hooks/ifo/v1/useGetWalletIfoData.ts"],"names":["getBscScanAddressUrl","address","BASE_BSC_SCAN_URL","getBscScanTransactionUrl","transactionHash","getBscScanBlockNumberUrl","block","getBscScanBlockCountdownUrl","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getCakeContract","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","BIG_ZERO","balance","setBalance","web3","useWeb3","contract","getBep20Contract","balanceOf","res","fetchBalance","useGetBnbBalance","account","useWeb3React","useLastUpdated","lastUpdated","setLastUpdated","eth","getBalance","walletBalance","refresh","useTokenBalance","fastRefresh","Date","now","setStateLastUpdated","previousLastUpdated","usePreviousValue","useCallback","value","ref","useRef","current","StyledApproveConfirmButtons","styled","div","theme","mediaQueries","md","Button","UIKitButton","iconAttrs","width","color","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","spin","ApproveConfirmButtons","isApproveDisabled","isApproving","isConfirming","isConfirmDisabled","onApprove","onConfirm","t","useTranslation","disabled","onClick","endIcon","undefined","isLoading","justifyContent","initialState","approvalState","approvalReceipt","approvalError","confirmState","confirmReceipt","confirmError","reducer","state","actions","type","payload","useApproveConfirmTransaction","onRequiresApproval","onSuccess","noop","useReducer","dispatch","handlePreApprove","toastError","useToast","then","result","isApproved","isConfirmed","handleApprove","on","error","console","handleConfirm","Wrapper","Flex","StyledExpandableLabelWrapper","StyledChildrenFlex","isExpanded","colors","inputSecondary","FoldableText","title","children","props","setIsExpanded","flexDirection","alignItems","pb","fontWeight","expanded","useLotteryAllowance","allowance","setAllowance","useCake","getLotteryAddress","fetchAllowance","useIfoAllowance","tokenContract","spenderAddress","dependency","fetch","formatPool","pool","raisingAmountPool","offeringAmountPool","limitPerUserInLP","hasTax","totalAmountPool","sumTaxesOverflow","useGetPublicIfoData","ifo","releaseBlockNumber","lpTokenPriceInUsd","useLpTokenPrice","currency","symbol","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","poolBasic","taxRate","poolUnlimited","startBlockNum","endBlockNum","numberPoints","setState","currentBlock","useBlock","useIfoV2Contract","fetchIfoData","makeBatchRequest","startBlock","endBlock","viewPoolInformation","viewPoolTaxRateOverflow","poolBasicFormatted","poolUnlimitedFormatted","parseInt","getStatus","totalBlocks","prev","BSC_BLOCK_TIME","currencyPriceInUSD","useGetWalletIfoData","amountTokenCommittedInLP","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","hasClaimed","isPendingTx","currencyContract","useERC20","getAddress","viewUserInfo","viewUserOfferingAndRefundingAmountsForPools","userInfo","amounts","prevState","setPendingTx","poolId","setIsClaimed","arrayEvery","require","baseEvery","baseIteratee","isArray","isIterateeCall","module","exports","collection","predicate","guard","func","array","index","length","baseEach","PoolIds","useIfoV1Contract","raisingAmount","totalAmount","getOfferingAmount","getRefundingAmount","offeringAmount","userInfoResponse","refundingAmount","amount","claimed"],"mappings":"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","file":"static/js/0.eea5ebd2.chunk.js","sourcesContent":["import { BASE_BSC_SCAN_URL } from 'config'\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ApproveConfirmButtonsProps {\n  isApproveDisabled: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  isConfirmDisabled: boolean\n  onApprove: () => void\n  onConfirm: () => void\n}\n\nconst StyledApproveConfirmButtons = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`\n\nconst Button = styled(UIKitButton)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 160px;\n  }\n`\n\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\n\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <StyledApproveConfirmButtons>\n      <Box>\n        <Button\n          disabled={isApproveDisabled}\n          onClick={onApprove}\n          endIcon={isApproving ? spinnerIcon : undefined}\n          isLoading={isApproving}\n        >\n          {isApproving ? t('Approving') : t('Approve')}\n        </Button>\n      </Box>\n      <Flex justifyContent=\"center\">\n        <ChevronRight />\n        <ChevronBottom />\n      </Flex>\n      <Box>\n        <Button\n          onClick={onConfirm}\n          disabled={isConfirmDisabled}\n          isLoading={isConfirming}\n          endIcon={isConfirming ? spinnerIcon : undefined}\n        >\n          {isConfirming ? t('Confirming') : t('Confirm')}\n        </Button>\n      </Box>\n    </StyledApproveConfirmButtons>\n  )\n}\n\nexport default ApproveConfirmButtons\n","import { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWeb3React } from '@web3-react/core'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\n\ntype Web3Payload = Record<string, unknown> | null\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt'; payload: Web3Payload }\n  | { type: 'approve_error'; payload: Web3Payload }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt'; payload: Web3Payload }\n  | { type: 'confirm_error'; payload: Web3Payload }\n\ninterface State {\n  approvalState: LoadingState\n  approvalReceipt: Web3Payload\n  approvalError: Web3Payload\n  confirmState: LoadingState\n  confirmReceipt: Web3Payload\n  confirmError: Web3Payload\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  approvalReceipt: null,\n  approvalError: null,\n  confirmState: 'idle',\n  confirmReceipt: null,\n  confirmError: null,\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n        approvalReceipt: actions.payload,\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n        approvalError: actions.payload,\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n        confirmReceipt: actions.payload,\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n        confirmError: actions.payload,\n      }\n    default:\n      return state\n  }\n}\n\ntype ContractHandler = () => any\n\ninterface ApproveConfirmTransaction {\n  onApprove: ContractHandler\n  onConfirm: ContractHandler\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: (state: State) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    approvalReceipt: state.approvalReceipt,\n    approvalError: state.approvalError,\n    confirmReceipt: state.confirmReceipt,\n    confirmError: state.confirmError,\n    handleApprove: () => {\n      onApprove()\n        .on('sending', () => {\n          dispatch({ type: 'approve_sending' })\n        })\n        .on('receipt', (payload: Web3Payload) => {\n          dispatch({ type: 'approve_receipt', payload })\n        })\n        .on('error', (error: Web3Payload) => {\n          dispatch({ type: 'approve_error', payload: error })\n          console.error('An error occurred approving transaction:', error)\n          toastError(t('An error occurred approving transaction'))\n        })\n    },\n    handleConfirm: () => {\n      onConfirm()\n        .on('sending', () => {\n          dispatch({ type: 'confirm_sending' })\n        })\n        .on('receipt', (payload: Web3Payload) => {\n          dispatch({ type: 'confirm_receipt', payload })\n          onSuccess(state)\n        })\n        .on('error', (error: Web3Payload) => {\n          dispatch({ type: 'confirm_error', payload: error })\n          console.error('An error occurred confirming transaction:', error)\n          toastError(t('An error occurred confirming transaction'))\n        })\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ExpandableLabel, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FoldableTextProps extends FlexProps {\n  title?: string\n}\n\nconst Wrapper = styled(Flex)`\n  cursor: pointer;\n`\n\nconst StyledExpandableLabelWrapper = styled(Flex)`\n  button {\n    align-items: center;\n    justify-content: flex-start;\n  }\n`\n\nconst StyledChildrenFlex = styled(Flex)<{ isExpanded?: boolean }>`\n  overflow: hidden;\n  height: ${({ isExpanded }) => (isExpanded ? '100%' : '0px')};\n  padding-bottom: ${({ isExpanded }) => (isExpanded ? '16px' : '0px')};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n`\n\nconst FoldableText: React.FC<FoldableTextProps> = ({ title, children, ...props }) => {\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  return (\n    <Wrapper {...props} flexDirection=\"column\" onClick={() => setIsExpanded(!isExpanded)}>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" pb=\"16px\">\n        <Text fontWeight=\"bold\">{title}</Text>\n        <StyledExpandableLabelWrapper>\n          <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n            {isExpanded ? t('Hide') : t('Details')}\n          </ExpandableLabel>\n        </StyledExpandableLabelWrapper>\n      </Flex>\n      <StyledChildrenFlex isExpanded={isExpanded} flexDirection=\"column\">\n        {children}\n      </StyledChildrenFlex>\n    </Wrapper>\n  )\n}\n\nexport default FoldableText\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useCake } from './useContract'\nimport useRefresh from './useRefresh'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await cakeContract.methods.allowance(account, getLotteryAddress()).call()\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchAllowance()\n    }\n  }, [account, cakeContract, fastRefresh])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\n  const { account } = useWeb3React()\n  const [allowance, setAllowance] = useState(BIG_ZERO)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        console.error(e)\n      }\n    }\n\n    if (account) {\n      fetch()\n    }\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","import { useEffect, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus } from 'config/constants/types'\nimport { useBlock, useLpTokenPrice } from 'state/hooks'\nimport { useIfoV2Contract } from 'hooks/useContract'\nimport useRefresh from 'hooks/useRefresh'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { PublicIfoData, PoolCharacteristics } from '../types'\nimport { getStatus } from '../helpers'\n\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\nconst TAX_PRECISION = 10000000000\n\nconst formatPool = (pool) => ({\n  raisingAmountPool: new BigNumber(pool[0]),\n  offeringAmountPool: new BigNumber(pool[1]),\n  limitPerUserInLP: new BigNumber(pool[2]),\n  hasTax: pool[3],\n  totalAmountPool: new BigNumber(pool[4]),\n  sumTaxesOverflow: new BigNumber(pool[5]),\n})\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const { fastRefresh } = useRefresh()\n\n  const [state, setState] = useState({\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    poolBasic: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO,\n    },\n    poolUnlimited: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO,\n    },\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: 0,\n  })\n  const { currentBlock } = useBlock()\n  const contract = useIfoV2Contract(address)\n\n  const fetchIfoData = useCallback(async () => {\n    const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints] = (await makeBatchRequest([\n      contract.methods.startBlock().call,\n      contract.methods.endBlock().call,\n      contract.methods.viewPoolInformation(0).call,\n      contract.methods.viewPoolInformation(1).call,\n      contract.methods.viewPoolTaxRateOverflow(1).call,\n      contract.methods.numberPoints().call,\n    ])) as [string, string, PoolCharacteristics, PoolCharacteristics, number, number]\n\n    const poolBasicFormatted = formatPool(poolBasic)\n    const poolUnlimitedFormatted = formatPool(poolUnlimited)\n\n    const startBlockNum = parseInt(startBlock, 10)\n    const endBlockNum = parseInt(endBlock, 10)\n\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n    const totalBlocks = endBlockNum - startBlockNum\n    const blocksRemaining = endBlockNum - currentBlock\n\n    // Calculate the total progress until finished or until start\n    const progress =\n      currentBlock > startBlockNum\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n    setState((prev) => ({\n      ...prev,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      poolBasic: { ...poolBasicFormatted, taxRate: 0 },\n      poolUnlimited: { ...poolUnlimitedFormatted, taxRate: taxRate / TAX_PRECISION },\n      status,\n      progress,\n      blocksRemaining,\n      startBlockNum,\n      endBlockNum,\n      numberPoints,\n    }))\n  }, [contract, currentBlock, releaseBlockNumber])\n\n  useEffect(() => {\n    fetchIfoData()\n  }, [fetchIfoData, fastRefresh])\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\n}\n\nexport default useGetPublicIfoData\n","import { useEffect, useState, useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\nimport { useIfoAllowance } from 'hooks/useAllowance'\nimport useRefresh from 'hooks/useRefresh'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { getAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { WalletIfoState, WalletIfoData } from '../types'\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const { fastRefresh } = useRefresh()\n  const [state, setState] = useState<WalletIfoState>({\n    poolBasic: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n    poolUnlimited: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n  })\n\n  const { address, currency } = ifo\n\n  const { account } = useWeb3React()\n  const contract = useIfoV2Contract(address)\n  const currencyContract = useERC20(getAddress(currency.address))\n  const allowance = useIfoAllowance(currencyContract, address)\n\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = (poolId: PoolIds) => {\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  const fetchIfoData = useCallback(async () => {\n    const [userInfo, amounts] = await makeBatchRequest([\n      contract.methods.viewUserInfo(account, [0, 1]).call,\n      contract.methods.viewUserOfferingAndRefundingAmountsForPools(account, [0, 1]).call,\n    ])\n\n    setState((prevState) => ({\n      ...prevState,\n      poolBasic: {\n        ...prevState.poolBasic,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0]),\n        offeringAmountInToken: new BigNumber(amounts[0][0]),\n        refundingAmountInLP: new BigNumber(amounts[0][1]),\n        taxAmountInLP: new BigNumber(amounts[0][2]),\n        hasClaimed: userInfo[1][0],\n      },\n      poolUnlimited: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1]),\n        offeringAmountInToken: new BigNumber(amounts[1][0]),\n        refundingAmountInLP: new BigNumber(amounts[1][1]),\n        taxAmountInLP: new BigNumber(amounts[1][2]),\n        hasClaimed: userInfo[1][1],\n      },\n    }))\n  }, [account, contract])\n\n  useEffect(() => {\n    if (account) {\n      fetchIfoData()\n    }\n  }, [account, fetchIfoData, fastRefresh])\n\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\n}\n\nexport default useGetWalletIfoData\n","var arrayEvery = require('./_arrayEvery'),\n    baseEvery = require('./_baseEvery'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Checks if `predicate` returns truthy for **all** elements of `collection`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * **Note:** This method returns `true` for\n * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty collections.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * _.every([true, 1, null, 'yes'], Boolean);\n * // => false\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.every(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.every(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.every(users, 'active');\n * // => false\n */\nfunction every(collection, predicate, guard) {\n  var func = isArray(collection) ? arrayEvery : baseEvery;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = every;\n","/**\n * A specialized version of `_.every` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n */\nfunction arrayEvery(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (!predicate(array[index], index, array)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = arrayEvery;\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.every` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`\n */\nfunction baseEvery(collection, predicate) {\n  var result = true;\n  baseEach(collection, function(value, index, collection) {\n    result = !!predicate(value, index, collection);\n    return result;\n  });\n  return result;\n}\n\nmodule.exports = baseEvery;\n","import { IfoStatus } from 'config/constants/types'\n\nexport const getStatus = (currentBlock: number, startBlock: number, endBlock: number): IfoStatus => {\n  // Add an extra check to currentBlock because it takes awhile to fetch so the initial value is 0\n  // making the UI change to an inaccurate status\n  if (currentBlock === 0) {\n    return 'idle'\n  }\n\n  if (currentBlock < startBlock) {\n    return 'coming_soon'\n  }\n\n  if (currentBlock >= startBlock && currentBlock <= endBlock) {\n    return 'live'\n  }\n\n  if (currentBlock > endBlock) {\n    return 'finished'\n  }\n\n  return 'idle'\n}\n\nexport default null\n","import { useEffect, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\nimport { useBlock, useLpTokenPrice } from 'state/hooks'\nimport { useIfoV1Contract } from 'hooks/useContract'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { PublicIfoData } from '../types'\nimport { getStatus } from '../helpers'\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const [state, setState] = useState({\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: null,\n    [PoolIds.poolUnlimited]: {\n      raisingAmountPool: BIG_ZERO,\n      totalAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO, // Not know\n      limitPerUserInLP: BIG_ZERO, //  Not used\n      taxRate: 0, //  Not used\n      sumTaxesOverflow: BIG_ZERO, //  Not used\n    },\n  })\n  const { currentBlock } = useBlock()\n  const contract = useIfoV1Contract(address)\n\n  const fetchIfoData = useCallback(async () => {\n    const [startBlock, endBlock, raisingAmount, totalAmount] = (await makeBatchRequest([\n      contract.methods.startBlock().call,\n      contract.methods.endBlock().call,\n      contract.methods.raisingAmount().call,\n      contract.methods.totalAmount().call,\n    ])) as [string, string, string, string]\n\n    const startBlockNum = parseInt(startBlock, 10)\n    const endBlockNum = parseInt(endBlock, 10)\n\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n    const totalBlocks = endBlockNum - startBlockNum\n    const blocksRemaining = endBlockNum - currentBlock\n\n    // Calculate the total progress until finished or until start\n    const progress =\n      currentBlock > startBlockNum\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n    setState((prev) => ({\n      status,\n      blocksRemaining,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      progress,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      startBlockNum,\n      endBlockNum,\n      currencyPriceInUSD: null,\n      numberPoints: null,\n      [PoolIds.poolUnlimited]: {\n        ...prev.poolUnlimited,\n        raisingAmountPool: new BigNumber(raisingAmount),\n        totalAmountPool: new BigNumber(totalAmount),\n      },\n    }))\n  }, [contract, currentBlock, releaseBlockNumber])\n\n  useEffect(() => {\n    fetchIfoData()\n  }, [fetchIfoData])\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\n}\n\nexport default useGetPublicIfoData\n","import { useEffect, useState, useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract'\nimport { useIfoAllowance } from 'hooks/useAllowance'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { getAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { WalletIfoState, WalletIfoData } from '../types'\n\ninterface UserInfo {\n  amount: BigNumber\n  claimed: boolean\n}\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const [state, setState] = useState<WalletIfoState>({\n    [PoolIds.poolUnlimited]: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO, // Not used\n    },\n  })\n\n  const { address, currency } = ifo\n  const { poolUnlimited } = state\n\n  const { account } = useWeb3React()\n  const contract = useIfoV1Contract(address)\n  const currencyContract = useERC20(getAddress(currency.address))\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx)\n\n  const setPendingTx = (status: boolean) =>\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = () => {\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  const fetchIfoData = useCallback(async () => {\n    const [offeringAmount, userInfoResponse, refundingAmount] = (await makeBatchRequest([\n      contract.methods.getOfferingAmount(account).call,\n      contract.methods.userInfo(account).call,\n      contract.methods.getRefundingAmount(account).call,\n    ])) as [string, UserInfo, string]\n\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: new BigNumber(userInfoResponse.amount),\n        hasClaimed: userInfoResponse.claimed,\n        offeringAmountInToken: new BigNumber(offeringAmount),\n        refundingAmountInLP: new BigNumber(refundingAmount),\n      },\n    }))\n  }, [account, contract])\n\n  useEffect(() => {\n    if (account) {\n      fetchIfoData()\n    }\n  }, [account, fetchIfoData])\n\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\n}\n\nexport default useGetWalletIfoData\n"],"sourceRoot":""}