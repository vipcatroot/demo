{"version":3,"sources":["views/Collectibles/components/InfoRow.tsx","views/Collectibles/components/TransferNftModal.tsx","views/Collectibles/components/ClaimNftModal.tsx","views/Collectibles/components/NftCard/Preview.tsx","views/Collectibles/components/NftCard/index.tsx","views/Collectibles/components/NftGrid.tsx","views/Collectibles/components/NftCard/BunnySpecialCard.tsx","views/Collectibles/components/NftCard/EasterNftCard.tsx","views/Collectibles/components/NftList.tsx","views/Collectibles/index.tsx"],"names":["InfoRow","styled","div","Value","Text","ModalContent","Actions","Label","label","theme","colors","text","TransferNftModal","nft","tokenIds","onSuccess","onDismiss","useState","isLoading","setIsLoading","value","setValue","error","setError","t","useTranslation","account","useWeb3React","contract","useERC721","getAddressByType","type","toastSuccess","useToast","handleConfirm","a","Web3","utils","isAddress","methods","transferFrom","send","from","on","console","title","color","mb","nftName","name","htmlFor","id","placeholder","onChange","evt","inputValue","target","isWarning","disabled","width","variant","onClick","ClaimNftModal","onClaim","isConfirming","setIsConfirming","toastError","once","alignItems","justifyContent","bold","endIcon","spin","Container","cardBorder","StyledImage","img","StyledVideo","video","Preview","isOwned","images","previewImageSrc","lg","videoComponent","autoPlay","controls","loop","muted","poster","src","webm","mp4","href","ipfs","rel","previewImage","alt","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","canClaim","refresh","isOpen","setIsOpen","profile","useProfile","identifier","description","walletOwnsNft","length","Icon","ChevronUpIcon","ChevronDownIcon","handleClick","handleSuccess","useModal","onPresentTransferModal","onPresentClaimModal","isActive","outline","mt","p","as","style","textAlign","NftGrid","mediaQueries","sm","md","BunnySpecialCard","props","isClaimable","setIsClaimable","bunnySpecialContract","useBunnySpecialContract","variationId","useEffect","canClaimSingle","call","fetchClaimStatus","mintNFT","teamNftMap","EasterNftCard","team","easterNftContract","useEasterNftContract","nftComponents","hiccup","bullish","NftList","useGetCollectibles","dispatch","useAppDispatch","handleRefresh","fetchWalletNfts","orderBy","nfts","map","Card","StyledHero","textSubtle","Collectibles","Page","scale"],"mappings":"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","file":"static/js/17.7c95bc14.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Input, Modal, Text } from '@pancakeswap/uikit'\nimport { getAddressByType } from 'utils/collectibles'\nimport { Nft } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC721 } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const contract = useERC721(getAddressByType(nft.type))\n  const { toastSuccess } = useToast()\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(t('Please enter a valid wallet address'))\n      } else {\n        await contract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n            toastSuccess(t('NFT successfully transferred!'))\n          })\n          .on('error', () => {\n            console.error(error)\n            setError(t('Unable to transfer NFT'))\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={t('Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{t('Transferring')}:</Text>\n          <Value>{t('1x %nftName% NFT', { nftName: nft.name })}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{t('Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={t('Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {t('Cancel')}\n        </Button>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {t('Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { PromiEvent } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, InjectedModalProps, Modal, Text, Flex, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { Nft } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\n\ninterface ClaimNftModalProps extends InjectedModalProps {\n  nft: Nft\n  onSuccess: () => void\n  onClaim: () => PromiEvent<Contract>\n}\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onClaim, onDismiss }) => {\n  const [isConfirming, setIsConfirming] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleConfirm = async () => {\n    onClaim()\n      .once('sending', () => {\n        setIsConfirming(true)\n      })\n      .once('receipt', () => {\n        toastSuccess(t('Successfully claimed!'))\n        onDismiss()\n        onSuccess()\n      })\n      .once('error', (error) => {\n        console.error('Unable to claim NFT', error)\n        toastError(t('Error'), t('Unable to claim NFT, please try again.'))\n        setIsConfirming(false)\n      })\n  }\n\n  return (\n    <Modal title={t('Claim Collectible')} onDismiss={onDismiss}>\n      <ModalContent>\n        <Flex alignItems=\"center\" mb=\"8px\" justifyContent=\"space-between\">\n          <Text>{t('You will receive')}:</Text>\n          <Text bold>{t('1x %nftName% Collectible', { nftName: nft.name })}</Text>\n        </Flex>\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          onClick={handleConfirm}\n          disabled={!account}\n          isLoading={isConfirming}\n          endIcon={isConfirming ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Nft } from 'config/constants/types'\n\ninterface PreviewProps {\n  nft: Nft\n  isOwned?: boolean\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst StyledVideo = styled.video`\n  height: 100%;\n  width: 100%;\n`\n\nconst Preview: React.FC<PreviewProps> = ({ nft, isOwned = false }) => {\n  const { images, name, video } = nft\n  const previewImageSrc = `/images/nfts/${images.lg}`\n\n  if (video) {\n    const videoComponent = (\n      <StyledVideo autoPlay controls={false} loop muted poster={previewImageSrc}>\n        <source src={video.webm} type=\"video/webm\" />\n        <source src={video.mp4} type=\"video/mp4\" />\n      </StyledVideo>\n    )\n\n    return isOwned ? (\n      <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\n        {videoComponent}\n      </a>\n    ) : (\n      videoComponent\n    )\n  }\n\n  const previewImage = <StyledImage src={previewImageSrc} alt={name} />\n\n  return (\n    <Container>\n      {isOwned ? (\n        <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Preview\n","import React, { useState } from 'react'\nimport { PromiEvent } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@pancakeswap/uikit'\nimport { useProfile } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Nft } from 'config/constants/types'\nimport InfoRow from '../InfoRow'\nimport TransferNftModal from '../TransferNftModal'\nimport ClaimNftModal from '../ClaimNftModal'\nimport Preview from './Preview'\n\nexport interface NftCardProps {\n  nft: Nft\n  canClaim?: boolean\n  tokenIds?: number[]\n  onClaim?: () => PromiEvent<Contract>\n  refresh: () => void\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text' })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 24px;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft, canClaim = false, tokenIds = [], onClaim, refresh }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const { profile } = useProfile()\n  const { identifier, name, description } = nft\n  const walletOwnsNft = tokenIds.length > 0\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const handleClick = async () => {\n    setIsOpen(!isOpen)\n  }\n\n  const handleSuccess = () => {\n    refresh()\n  }\n\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} onClaim={onClaim} />)\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Preview nft={nft} isOwned={walletOwnsNft} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {walletOwnsNft && (\n            <Tag outline variant=\"secondary\">\n              {t('In Wallet')}\n            </Tag>\n          )}\n          {profile?.nft?.identifier === identifier && (\n            <Tag outline variant=\"success\">\n              {t('Profile Pic')}\n            </Tag>\n          )}\n        </Header>\n        {canClaim && (\n          <Button width=\"100%\" mt=\"24px\" onClick={onPresentClaimModal}>\n            {t('Claim this NFT')}\n          </Button>\n        )}\n        {walletOwnsNft && (\n          <Button width=\"100%\" variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {t('Transfer')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton width=\"100%\" endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {t('Details')}\n        </DetailsButton>\n        {isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" style={{ textAlign: 'center' }}>\n              {t(description)}\n            </Text>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\n\nconst NftGrid = styled.div`\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`\n\nexport default NftGrid\n","import React, { useEffect, useState } from 'react'\nimport { PromiEvent } from 'web3-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useBunnySpecialContract } from 'hooks/useContract'\nimport NftCard, { NftCardProps } from './index'\n\nconst BunnySpecialCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\n  const [isClaimable, setIsClaimable] = useState(false)\n  const { account } = useWeb3React()\n  const bunnySpecialContract = useBunnySpecialContract()\n  const { variationId } = nft\n\n  const handleClaim = (): PromiEvent<Contract> => {\n    return bunnySpecialContract.methods.mintNFT(variationId).send({ from: account })\n  }\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const canClaimSingle = await bunnySpecialContract.methods.canClaimSingle(account, variationId).call()\n      setIsClaimable(canClaimSingle)\n    }\n\n    if (account) {\n      fetchClaimStatus()\n    }\n  }, [account, variationId, bunnySpecialContract, setIsClaimable])\n\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\n}\n\nexport default BunnySpecialCard\n","import React, { useEffect, useState } from 'react'\nimport { PromiEvent } from 'web3-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useProfile } from 'state/hooks'\nimport { useEasterNftContract } from 'hooks/useContract'\nimport NftCard, { NftCardProps } from './index'\n\n/**\n * A map of NFT bunny Ids to Team ids\n * [identifier]: teamId\n */\nexport const teamNftMap = {\n  'easter-storm': 1,\n  'easter-flipper': 2,\n  'easter-caker': 3,\n}\n\nconst EasterNftCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\n  const [isClaimable, setIsClaimable] = useState(false)\n  const { account } = useWeb3React()\n  const { profile } = useProfile()\n  const { identifier } = nft\n  const { team } = profile ?? {}\n  const easterNftContract = useEasterNftContract()\n\n  const handleClaim = (): PromiEvent<Contract> => {\n    return easterNftContract.methods.mintNFT().send({ from: account })\n  }\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const canClaim = await easterNftContract.methods.canClaim(account).call()\n\n      // Wallet can claim if it is claimable and the nft being displayed is mapped to the wallet's team\n      setIsClaimable(canClaim ? team.id === teamNftMap[identifier] : false)\n    }\n\n    if (account && team) {\n      fetchClaimStatus()\n    }\n  }, [account, identifier, team, easterNftContract, setIsClaimable])\n\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\n}\n\nexport default EasterNftCard\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport { useWeb3React } from '@web3-react/core'\nimport nfts from 'config/constants/nfts'\nimport { useAppDispatch } from 'state'\nimport { fetchWalletNfts } from 'state/collectibles'\nimport { useGetCollectibles } from 'state/hooks'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\nimport BunnySpecialCard from './NftCard/BunnySpecialCard'\nimport EasterNftCard from './NftCard/EasterNftCard'\n\n/**\n * A map of bunnyIds to special campaigns (NFT distribution)\n * Each NftCard is responsible for checking it's own claim status\n *\n */\nconst nftComponents = {\n  hiccup: BunnySpecialCard,\n  bullish: BunnySpecialCard,\n  'easter-storm': EasterNftCard,\n  'easter-flipper': EasterNftCard,\n  'easter-caker': EasterNftCard,\n}\n\nconst NftList = () => {\n  const { tokenIds } = useGetCollectibles()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleRefresh = () => {\n    dispatch(fetchWalletNfts(account))\n  }\n\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => {\n        const Card = nftComponents[nft.identifier] ?? NftCard\n\n        return (\n          <div key={nft.name}>\n            <Card nft={nft} tokenIds={tokenIds[nft.identifier]} refresh={handleRefresh} />\n          </div>\n        )\n      })}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/layout/Page'\nimport NftList from './components/NftList'\n\nconst StyledHero = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Collectibles = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Page>\n      <StyledHero>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\">\n          {t('Pancake Collectibles')}\n        </Heading>\n      </StyledHero>\n      <NftList />\n    </Page>\n  )\n}\n\nexport default Collectibles\n"],"sourceRoot":""}